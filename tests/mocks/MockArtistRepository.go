// Code generated by MockGen. DO NOT EDIT.
// Source: jukebox-app/internal/core/repository (interfaces: ArtistRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "jukebox-app/internal/core/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArtistRepository is a mock of ArtistRepository interface.
type MockArtistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArtistRepositoryMockRecorder
}

// MockArtistRepositoryMockRecorder is the mock recorder for MockArtistRepository.
type MockArtistRepositoryMockRecorder struct {
	mock *MockArtistRepository
}

// NewMockArtistRepository creates a new mock instance.
func NewMockArtistRepository(ctrl *gomock.Controller) *MockArtistRepository {
	mock := &MockArtistRepository{ctrl: ctrl}
	mock.recorder = &MockArtistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistRepository) EXPECT() *MockArtistRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArtistRepository) Create(arg0 context.Context, arg1 *model.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArtistRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArtistRepository)(nil).Create), arg0, arg1)
}

// DeleteById mocks base method.
func (m *MockArtistRepository) DeleteById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockArtistRepositoryMockRecorder) DeleteById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockArtistRepository)(nil).DeleteById), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockArtistRepository) FindAll(arg0 context.Context) (*[]model.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].(*[]model.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockArtistRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockArtistRepository)(nil).FindAll), arg0)
}

// FindByCode mocks base method.
func (m *MockArtistRepository) FindByCode(arg0 context.Context, arg1 int64) (*model.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", arg0, arg1)
	ret0, _ := ret[0].(*model.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockArtistRepositoryMockRecorder) FindByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockArtistRepository)(nil).FindByCode), arg0, arg1)
}

// FindById mocks base method.
func (m *MockArtistRepository) FindById(arg0 context.Context, arg1 int64) (*model.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*model.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockArtistRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockArtistRepository)(nil).FindById), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockArtistRepository) FindByName(arg0 context.Context, arg1 string) (*model.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*model.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockArtistRepositoryMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockArtistRepository)(nil).FindByName), arg0, arg1)
}

// Update mocks base method.
func (m *MockArtistRepository) Update(arg0 context.Context, arg1 *model.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArtistRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArtistRepository)(nil).Update), arg0, arg1)
}
