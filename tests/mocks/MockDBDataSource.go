// Code generated by MockGen. DO NOT EDIT.
// Source: jukebox-app/pkg/datasource (interfaces: DBDataSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBDataSource is a mock of DBDataSource interface.
type MockDBDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDBDataSourceMockRecorder
}

// MockDBDataSourceMockRecorder is the mock recorder for MockDBDataSource.
type MockDBDataSourceMockRecorder struct {
	mock *MockDBDataSource
}

// NewMockDBDataSource creates a new mock instance.
func NewMockDBDataSource(ctrl *gomock.Controller) *MockDBDataSource {
	mock := &MockDBDataSource{ctrl: ctrl}
	mock.recorder = &MockDBDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBDataSource) EXPECT() *MockDBDataSourceMockRecorder {
	return m.recorder
}

// GetDatabase mocks base method.
func (m *MockDBDataSource) GetDatabase() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockDBDataSourceMockRecorder) GetDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockDBDataSource)(nil).GetDatabase))
}
