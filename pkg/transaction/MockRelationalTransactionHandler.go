// Code generated by MockGen. DO NOT EDIT.
// Source: jukebox-app/pkg/transaction (interfaces: RelationalTransactionHandler)

// Package transaction is a generated GoMock package.
package transaction

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRelationalTransactionHandler is a mock of RelationalTransactionHandler interface.
type MockRelationalTransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRelationalTransactionHandlerMockRecorder
}

// MockRelationalTransactionHandlerMockRecorder is the mock recorder for MockRelationalTransactionHandler.
type MockRelationalTransactionHandlerMockRecorder struct {
	mock *MockRelationalTransactionHandler
}

// NewMockRelationalTransactionHandler creates a new mock instance.
func NewMockRelationalTransactionHandler(ctrl *gomock.Controller) *MockRelationalTransactionHandler {
	mock := &MockRelationalTransactionHandler{ctrl: ctrl}
	mock.recorder = &MockRelationalTransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationalTransactionHandler) EXPECT() *MockRelationalTransactionHandlerMockRecorder {
	return m.recorder
}

// HandleTransaction mocks base method.
func (m *MockRelationalTransactionHandler) HandleTransaction(arg0 RelationalTransactionHandlerFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockRelationalTransactionHandlerMockRecorder) HandleTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockRelationalTransactionHandler)(nil).HandleTransaction), arg0)
}
