// Code generated by MockGen. DO NOT EDIT.
// Source: jukebox-app/src/misc/transaction (interfaces: DBTransactionHandler)

// Package transaction is a generated GoMock package.
package transaction

import (
	transaction "jukebox-app/src/misc/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBTransactionHandler is a mock of DBTransactionHandler interface.
type MockDBTransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBTransactionHandlerMockRecorder
}

// MockDBTransactionHandlerMockRecorder is the mock recorder for MockDBTransactionHandler.
type MockDBTransactionHandlerMockRecorder struct {
	mock *MockDBTransactionHandler
}

// NewMockDBTransactionHandler creates a new mock instance.
func NewMockDBTransactionHandler(ctrl *gomock.Controller) *MockDBTransactionHandler {
	mock := &MockDBTransactionHandler{ctrl: ctrl}
	mock.recorder = &MockDBTransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTransactionHandler) EXPECT() *MockDBTransactionHandlerMockRecorder {
	return m.recorder
}

// HandleTransaction mocks base method.
func (m *MockDBTransactionHandler) HandleTransaction(arg0 transaction.DBTransactionHandlerFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockDBTransactionHandlerMockRecorder) HandleTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockDBTransactionHandler)(nil).HandleTransaction), arg0)
}
