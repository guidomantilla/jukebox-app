type Model interface {
	Artist | Song | User
}
type PK interface {
	int64
}

type Key interface {
	string | int64
}

type GenericRepository[M model.Model, PK model.PK] interface {
	Create(ctx context.Context, model *M) error
	Update(ctx context.Context, model *M) error
	DeleteById(ctx context.Context, pk PK) error
	FindById(ctx context.Context, pk PK) (*M, error)
	FindAll(ctx context.Context) (*[]M, error)
}

type Repository_FindAllFn[M Model] func(ctx context.Context) (*[]M, error)
type Repository_FindByKeyFn[M Model, K Key] func(ctx context.Context, key K) (*M, error)

func CallRepositoryFindAllFunction[M Model](t *testing.T, statementFind string, findAllFn Repository_FindAllFn[M], withQueryError bool, withScanError bool) (*[]M, error) {

	var err error
	var db *sql.DB
	var mock sqlmock.Sqlmock
	if db, mock, err = sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual)); err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}

	mock.ExpectBegin()
	mock.ExpectPrepare(statementFind)
	expectQuery := mock.ExpectQuery(statementFind)

	if withQueryError {
		expectQuery.WillReturnError(errors.New("some_error"))
	} else {
		if withScanError {
			expectQuery.WillReturnRows(
				sqlmock.NewRows([]string{"id", "code", "name", "email"}).
					AddRow("1", "101", "test01", "test01@test.com").
					AddRow("1", "a", "test02", "test02@test.com"), // makes the rows.scan(...) fail
			)
		} else {
			expectQuery.WillReturnRows(
				sqlmock.NewRows([]string{"id", "code", "name", "email"}).
					AddRow("1", "101", "test01", "test01@test.com").
					AddRow("1", "102", "test02", "test02@test.com"),
			)
		}
	}

	openFunc := datasource.OpenDataSourceFunc(func(driverName, dataSourceUrl string) (*sql.DB, error) {
		return db, nil
	})
	dataSource := datasource.NewRelationalDataSource("some_driver_name", "some_username", "some_password", ":username_:password", openFunc)

	database, _ := dataSource.GetDatabase()
	tx, _ := database.Begin()

	txCtx := context.WithValue(context.Background(), transaction.RelationalTransactionContext{}, tx)

	return findAllFn(txCtx)
}
