version: "3.9"  # optional since v1.27.0
services:

  jukebox-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: jukebox-app
    container_name: jukebox-app
    ports:
      - "8080:8080"
    depends_on:
      - jukebox-mysql
      - jukebox-postgres
      - jukebox-redis
    environment:
      HOST_POST: ':8080'
      LOG_LEVEL: 'ERROR'
      DATASOURCE_USERNAME: 'jukebox'
      DATASOURCE_PASSWORD: 'jukebox+'
      DATASOURCE_URL: ':username::password@tcp(jukebox-mysql:3307)/jukebox?charset=utf8&multiStatements=true'
      SENTRY_DSN: ''
      SENTRY_ENVIRONMENT: 'dev'
      SENTRY_RELEASE: 'sample'
    networks:
      - jukebox-network

## DATABASES
  jukebox-mysql:
    image: mysql
    platform: linux/x86_64
    restart: always
    container_name: jukebox-mysql
    ports:
      - "3307:3306"
      - "33070:33060"
    volumes:
      - jukebox-mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: 'jukebox'
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 'jukebox*'
      MYSQL_USER: 'jukebox'
      MYSQL_PASSWORD: 'jukebox+'
    networks:
      - jukebox-network
  jukebox-postgres:
    image: postgres
    platform: linux/x86_64
    restart: always
    container_name: jukebox-postgres
    ports:
      - "5433:5432"
    volumes:
      - jukebox-postgres:/var/lib/postgresql
      - jukebox-postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: 'jukebox'
      POSTGRES_USER: 'jukebox'
      POSTGRES_PASSWORD: 'jukebox+'
    networks:
      - jukebox-network
  jukebox-redis:
    image: redis
    platform: linux/x86_64
    restart: always
    container_name: jukebox-redis
    ports:
      - "6379:6379"
    volumes:
      - jukebox-redis:/var/lib/redis
      - jukebox-redis_config:/usr/local/etc/redis/redis.conf
    #environment:
    networks:
      - jukebox-network

## KAFKA
  jukebox-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/x86_64
    restart: always
    container_name: jukebox-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_SERVER_ID: '1'
      ZOOKEEPER_SERVERS: 'jukebox-zookeeper:2888:3888'
    networks:
      - jukebox-network
  jukebox-kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/x86_64
    restart: always
    container_name: jukebox-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    depends_on:
      -  jukebox-zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://jukebox-kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_CONNECT: 'jukebox-zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_JMX_PORT: '9999'
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    networks:
      - jukebox-network

## SONARQUBE
  sonarqube-server:
    image: sonarqube
    platform: linux/x86_64
    restart: always
    container_name: sonarqube-server
    ports:
      - "9000:9000"
    depends_on:
      - sonarqube-postgres
    volumes:
      - sonarqube-server_data:/opt/sonarqube/data
      - sonarqube-server_extensions:/opt/sonarqube/extensions
      - sonarqube-server_logs:/opt/sonarqube/logs
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-postgres:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    networks:
      - jukebox-network
  sonarqube-postgres:
    image: postgres
    platform: linux/x86_64
    restart: always
    container_name: sonarqube-postgres
    volumes:
      - sonarqube-postgres:/var/lib/postgresql
      - sonarqube-postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    networks:
      - jukebox-network

volumes:
  jukebox-mysql:
    name: jukebox-mysql

## DATABASES
  jukebox-postgres:
    name: jukebox-postgres
  jukebox-postgres_data:
    name: jukebox-postgres_data
  jukebox-redis:
    name: jukebox-redis
  jukebox-redis_config:
    name: jukebox-redis_config

  ## SONARQUBE
  sonarqube-server_data:
    name: sonarqube-server_data
  sonarqube-server_extensions:
    name: sonarqube-server_extensions
  sonarqube-server_logs:
    name: sonarqube-server_logs
  sonarqube-postgres:
    name: sonarqube-postgres
  sonarqube-postgres_data:
    name: sonarqube-postgres_data

networks:
  jukebox-network:
    name: jukebox-network
    driver: bridge
